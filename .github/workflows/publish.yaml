name: Publish
run-name: Publish ${{ inputs.resourceName }} ${{ inputs.resourceVersionPublishing }} 
on:
  workflow_dispatch:
    inputs:
      regions:
        description: "Stringified JSON array of AWS regions"
        default: '["af-south-1","ap-east-1","ap-northeast-1","ap-northeast-2","ap-northeast-3","ap-south-1","ap-southeast-1","ap-southeast-2","ap-southeast-3","ca-central-1","eu-central-1","eu-north-1","eu-south-1","eu-west-1","eu-west-2","eu-west-3","me-south-1","sa-east-1","us-east-1","us-east-2","us-west-1","us-west-2","ap-south-2","ap-southeast-4","eu-central-2","eu-south-2","me-central-1"]'
        required: true
      resourceName:
        description: "Folder name of the Resource in this Repo"
        default: ""
        required: true
      resourceVersionPublishing:
        description: "Version used to publish the resource, empty will use the next minor version"
        default: ""
        required: false
      maxParallelRegions:
        description: "Maximum number of regions to be updated concurrently"
        type: number
        default: 15
        required: true
  
jobs:
  publish:
    env: # env vars defined here can be referenced in env vars inside the steps
      MONGODB_ATLAS_BASE_URL: ${{ github.event.inputs.resourceName=='resource-policy' && 'https://cloud-qa.mongodb.com/' || 'https://cloud.mongodb.com/' }}
      MONGODB_ATLAS_OUTPUT: 'json'
      # some resources need specific Atlas credentials and orgs
      MONGODB_ATLAS_ORG_ID: ${{ github.event.inputs.resourceName=='organization' && secrets.ATLAS_ORG_ID || github.event.inputs.resourceName=='resource-policy' && vars.MONGODB_ATLAS_RP_ORG_ID_QA || github.event.inputs.resourceName=='federated-settings-org-role-mapping' && secrets.ATLAS_ORG_ID_FOR_FEDERATION || secrets.ATLAS_ORG_ID_PUBLISHING }}
      MONGODB_ATLAS_PUBLIC_KEY: ${{ github.event.inputs.resourceName=='organization' && secrets.ATLAS_PUBLIC_KEY || github.event.inputs.resourceName=='resource-policy' && secrets.MONGODB_ATLAS_RP_PUBLIC_KEY_QA || github.event.inputs.resourceName=='federated-settings-org-role-mapping' && secrets.ATLAS_PUBLIC_KEY_FOR_FEDERATION || secrets.ATLAS_PUBLIC_KEY_PUBLISHING }}
      MONGODB_ATLAS_PRIVATE_KEY: ${{ github.event.inputs.resourceName=='organization' && secrets.ATLAS_PRIVATE_KEY || github.event.inputs.resourceName=='resource-policy' && secrets.MONGODB_ATLAS_RP_PRIVATE_KEY_QA || github.event.inputs.resourceName=='federated-settings-org-role-mapping' && secrets.ATLAS_PRIVATE_KEY_FOR_FEDERATION || secrets.ATLAS_PRIVATE_KEY_PUBLISHING }}
      MONGODB_ATLAS_PROFILE: ${{ github.event.inputs.resourceName=='organization' && 'cfn-publish-organization-profile' || github.event.inputs.resourceName=='resource-policy' && 'qa-resource-policy-cloud-profile' || 'default' }}
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJSON(github.event.inputs.maxParallelRegions) }}
      matrix:
        region: ${{ fromJSON(github.event.inputs.regions) }}
    name: publish-${{ matrix.region }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version-file: 'cfn-resources/go.mod'
      - name: setup Atlas CLI
        uses: mongodb/atlas-github-action@15663d068c40a8582d881560961fce9d45e0df9a
      - uses: aws-actions/setup-sam@f664fad9e12492edfc187a31f575537dfbb0ff63
        with:
          use-installer: true
      - uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PUBLISHING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PUBLISHING }}
          aws-region: ${{ matrix.region }}
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
      - name: Install AWS CLI & tools
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install awscli cloudformation-cli cloudformation-cli-go-plugin
      - name: Run publishing script
        id: publish
        run: |
          cd cfn-resources
          ./cfn-publish.sh "${{ github.event.inputs.resourceName }}"
          echo "published_version=$(cat published_version.txt)" >> "$GITHUB_OUTPUT"
        env:
          RESOURCE_VERSION_PUBLISHING: ${{ github.event.inputs.resourceVersionPublishing }}
          MCLI_OPS_MANAGER_URL: ${{ env.MONGODB_ATLAS_BASE_URL }}
          MCLI_OUTPUT: ${{ env.MONGODB_ATLAS_OUTPUT }}
          MCLI_ORG_ID: ${{ env.MONGODB_ATLAS_ORG_ID }}
          MCLI_PUBLIC_API_KEY: ${{ env.MONGODB_ATLAS_PUBLIC_KEY }}
          MCLI_PRIVATE_API_KEY: ${{ env.MONGODB_ATLAS_PRIVATE_KEY }}
          AWS_DEFAULT_REGION: ${{ matrix.region }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID_PUBLISHING}}
          MONGODB_ATLAS_ORG_OWNER_ID: ${{ github.event.inputs.resourceName=='organization' && secrets.ATLAS_ORG_OWNER_ID || secrets.ATLAS_ORG_OWNER_ID_PUBLISHING }}
          ATLAS_FEDERATED_SETTINGS_ID: ${{ secrets.ATLAS_FEDERATED_SETTINGS_ID_PUBLISHING }}
          MONGODB_ATLAS_PROFILE: ${{ env.MONGODB_ATLAS_PROFILE }}

          # LDAP config
          LDAP_HOST_NAME: ${{ secrets.LDAP_HOST_NAME_PUBLISHING }}
          LDAP_BIND_USER_NAME: ${{ secrets.LDAP_BIND_USER_NAME_PUBLISHING }}
          LDAP_BIND_PASSWORD: ${{ secrets.LDAP_BIND_PASSWORD_PUBLISHING }}

          # Third-party integration config
          WEBHOOK_CREATE_URL: ${{ secrets.WEBHOOK_CREATE_URL_PUBLISHING }}
          WEBHOOK_UPDATE_URL: ${{ secrets.WEBHOOK_UPDATE_URL_PUBLISHING }}
          WEBHOOK_UPDATE_SECRET: ${{ secrets.WEBHOOK_UPDATE_SECRET_PUBLISHING }}
          PROMETHEUS_USER_NAME: ${{ secrets.PROMETHEUS_USER_NAME_PUBLISHING }}
          PROMETHEUS_PASSWORD_NAME: ${{ secrets.PROMETHEUS_PASSWORD_NAME_PUBLISHING }}
          PAGER_DUTY_CREATE_SERVICE_KEY: ${{ secrets.PAGER_DUTY_CREATE_SERVICE_KEY_PUBLISHING }}
          PAGER_DUTY_UPDATE_SERVICE_KEY: ${{ secrets.PAGER_DUTY_UPDATE_SERVICE_KEY_PUBLISHING }}
          DATA_DOG_CREATE_API_KEY: ${{ secrets.DATA_DOG_CREATE_API_KEY_PUBLISHING }}
          DATA_DOG_UPDATE_API_KEY: ${{ secrets.DATA_DOG_UPDATE_API_KEY_PUBLISHING }}
          OPS_GENIE_API_KEY: ${{ secrets.OPS_GENIE_API_KEY_PUBLISHING }}
          MICROSOFT_TEAMS_WEBHOOK_CREATE_URL: ${{ secrets.MICROSOFT_TEAMS_WEBHOOK_CREATE_URL_PUBLISHING }}
          MICROSOFT_TEAMS_WEBHOOK_UPDATE_URL: ${{ secrets.MICROSOFT_TEAMS_WEBHOOK_UPDATE_URL_PUBLISHING }}
    outputs:
      published_version: ${{ steps.publish.outputs.published_version }}

  compliance:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: terraform-provider-mongodbatlas-checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          repository: mongodb/terraform-provider-mongodbatlas
          ref: master
      - name: Generate SSDLC report
        uses: mongodb/terraform-provider-mongodbatlas/.github/templates/run-script-and-commit@master
        with:
          script_call: |
            AUTHOR="${{ github.actor }}"
            export AUTHOR
            make gen-sbom-and-ssdlc-report RESOURCE=${{ github.event.inputs.resourceName }} VERSION=${{ needs.publish.outputs.published_version }}
          apix_bot_pat: ${{ secrets.APIX_BOT_PAT }}
          remote: https://svc-apix-bot:${{ secrets.APIX_BOT_PAT }}@github.com/${{ github.repository }}
          gpg_private_key: ${{ secrets.APIX_BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.APIX_BOT_PASSPHRASE }}
          file_to_commit: 'cfn-resources/${{ github.event.inputs.resourceName }}/compliance/v*/*'
          commit_message:
            "chore: Update SSDLC report for ${{ needs.publish.outputs.published_version }}"
          repo-path: "cfn-resources/"
        env:
          KONDUKTO_TOKEN: ${{ secrets.KONDUKTO_TOKEN }}
          SILKBOMB_IMG: ${{ vars.SILKBOMB_IMG }}
          KONDUKTO_REPO: ${{ vars.KONDUKTO_REPO }}
          KONDUKTO_BRANCH_PREFIX: ${{ vars.KONDUKTO_BRANCH_PREFIX }}
