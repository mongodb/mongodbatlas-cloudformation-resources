// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Returns and adds Cloud Backup export jobs.
 *
 * @schema CfnCloudBackupSnapshotExportJobProps
 */
export interface CfnCloudBackupSnapshotExportJobProps {
  /**
   * @schema CfnCloudBackupSnapshotExportJobProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * Human-readable label that identifies the cluster.
   *
   * @schema CfnCloudBackupSnapshotExportJobProps#ClusterName
   */
  readonly clusterName?: string;

  /**
   * Collection of key-value pairs that represent custom data for the metadata file that MongoDB Cloud uploads to the bucket when the export job finishes.
   *
   * @schema CfnCloudBackupSnapshotExportJobProps#CustomDataSet
   */
  readonly customDataSet?: CustomData[];

  /**
   * Unique 24-hexadecimal character string that identifies the AWS bucket to which MongoDB Cloud exports the Cloud Backup snapshot.
   *
   * @schema CfnCloudBackupSnapshotExportJobProps#ExportBucketId
   */
  readonly exportBucketId?: string;

  /**
   * State of the export job for the collections on the replica set only.
   *
   * @schema CfnCloudBackupSnapshotExportJobProps#ExportStatus
   */
  readonly exportStatus?: CfnCloudBackupSnapshotExportJobPropsExportStatus;

  /**
   * Unique 24-hexadecimal digit string that identifies your project.
   *
   * @schema CfnCloudBackupSnapshotExportJobProps#GroupId
   */
  readonly groupId?: string;

  /**
   * Unique 24-hexadecimal character string that identifies the snapshot.
   *
   * @schema CfnCloudBackupSnapshotExportJobProps#SnapshotId
   */
  readonly snapshotId?: string;

}

/**
 * Converts an object of type 'CfnCloudBackupSnapshotExportJobProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudBackupSnapshotExportJobProps(obj: CfnCloudBackupSnapshotExportJobProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'ClusterName': obj.clusterName,
    'CustomDataSet': obj.customDataSet?.map(y => toJson_CustomData(y)),
    'ExportBucketId': obj.exportBucketId,
    'ExportStatus': toJson_CfnCloudBackupSnapshotExportJobPropsExportStatus(obj.exportStatus),
    'GroupId': obj.groupId,
    'SnapshotId': obj.snapshotId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateKey': obj.privateKey,
    'PublicKey': obj.publicKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema customData
 */
export interface CustomData {
  /**
   * Key for the metadata file that MongoDB Cloud uploads to the bucket when the export job finishes.
   *
   * @schema customData#Key
   */
  readonly key?: string;

  /**
   * Value for the key to include in file that MongoDB Cloud uploads to the bucket when the export job finishes.
   *
   * @schema customData#Value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'CustomData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CustomData(obj: CustomData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Key': obj.key,
    'Value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * State of the export job for the collections on the replica set only.
 *
 * @schema CfnCloudBackupSnapshotExportJobPropsExportStatus
 */
export interface CfnCloudBackupSnapshotExportJobPropsExportStatus {
  /**
   * Number of collections on the replica set that MongoDB Cloud exported.
   *
   * @schema CfnCloudBackupSnapshotExportJobPropsExportStatus#ExportedCollections
   */
  readonly exportedCollections?: number;

  /**
   * Total number of collections on the replica set to export.
   *
   * @schema CfnCloudBackupSnapshotExportJobPropsExportStatus#TotalCollections
   */
  readonly totalCollections?: number;

}

/**
 * Converts an object of type 'CfnCloudBackupSnapshotExportJobPropsExportStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudBackupSnapshotExportJobPropsExportStatus(obj: CfnCloudBackupSnapshotExportJobPropsExportStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExportedCollections': obj.exportedCollections,
    'TotalCollections': obj.totalCollections,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `MongoDB::Atlas::CloudBackupSnapshotExportJob`
 *
 * @cloudformationResource MongoDB::Atlas::CloudBackupSnapshotExportJob
 * @stability external
 */
export class CfnCloudBackupSnapshotExportJob extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = 'MongoDB::Atlas::CloudBackupSnapshotExportJob';

  /**
   * Resource props.
   */
  public readonly props: CfnCloudBackupSnapshotExportJobProps;

  /**
   * Attribute `MongoDB::Atlas::CloudBackupSnapshotExportJob.ExportId`
   */
  public readonly attrExportId: string;
  /**
   * Attribute `MongoDB::Atlas::CloudBackupSnapshotExportJob.TestMode`
   */
  public readonly attrTestMode: string;
  /**
   * Attribute `MongoDB::Atlas::CloudBackupSnapshotExportJob.FinishedAt`
   */
  public readonly attrFinishedAt: string;
  /**
   * Attribute `MongoDB::Atlas::CloudBackupSnapshotExportJob.Components`
   */
  public readonly attrComponents: any[];
  /**
   * Attribute `MongoDB::Atlas::CloudBackupSnapshotExportJob.Links`
   */
  public readonly attrLinks: any[];
  /**
   * Attribute `MongoDB::Atlas::CloudBackupSnapshotExportJob.Prefix`
   */
  public readonly attrPrefix: string;
  /**
   * Attribute `MongoDB::Atlas::CloudBackupSnapshotExportJob.CreatedAt`
   */
  public readonly attrCreatedAt: string;
  /**
   * Attribute `MongoDB::Atlas::CloudBackupSnapshotExportJob.State`
   */
  public readonly attrState: string;

  /**
   * Create a new `MongoDB::Atlas::CloudBackupSnapshotExportJob`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnCloudBackupSnapshotExportJobProps) {
    super(scope, id, { type: CfnCloudBackupSnapshotExportJob.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnCloudBackupSnapshotExportJobProps(props)! });

    this.props = props;

    this.attrExportId = cdk.Token.asString(this.getAtt('ExportId'));
    this.attrTestMode = cdk.Token.asString(this.getAtt('TestMode'));
    this.attrFinishedAt = cdk.Token.asString(this.getAtt('FinishedAt'));
    this.attrComponents = this.getAtt('Components');
    this.attrLinks = this.getAtt('Links');
    this.attrPrefix = cdk.Token.asString(this.getAtt('Prefix'));
    this.attrCreatedAt = cdk.Token.asString(this.getAtt('CreatedAt'));
    this.attrState = cdk.Token.asString(this.getAtt('State'));
  }
}