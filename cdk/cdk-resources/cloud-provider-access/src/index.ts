// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Returns, adds, authorizes, and removes AWS IAM roles in Atlas.
 *
 * @schema CfnCloudProviderAccessProps
 */
export interface CfnCloudProviderAccessProps {
  /**
   * @schema CfnCloudProviderAccessProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * Unique 24-hexadecimal digit string that identifies your project.
   *
   * @schema CfnCloudProviderAccessProps#ProjectId
   */
  readonly projectId: string;

  /**
   * Amazon Resource Name (ARN) that identifies the Amazon Web Services (AWS) Identity and Access Management (IAM) role that MongoDB Cloud assumes when it accesses resources in your AWS account.
   *
   * @schema CfnCloudProviderAccessProps#IamAssumedRoleArn
   */
  readonly iamAssumedRoleArn?: string;

  /**
   * Valid AWS Region in which IAM assumed role will be provisioned for cloudprovider access from Atlas
   *
   * @schema CfnCloudProviderAccessProps#IamAwsRegion
   */
  readonly iamAwsRegion?: string;

}

/**
 * Converts an object of type 'CfnCloudProviderAccessProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnCloudProviderAccessProps(obj: CfnCloudProviderAccessProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'ProjectId': obj.projectId,
    'IamAssumedRoleArn': obj.iamAssumedRoleArn,
    'IamAwsRegion': obj.iamAwsRegion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateKey': obj.privateKey,
    'PublicKey': obj.publicKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A CloudFormation `MongoDB::Atlas::CloudProviderAccess`
 *
 * @cloudformationResource MongoDB::Atlas::CloudProviderAccess
 * @stability external
 */
export class CfnCloudProviderAccess extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = 'MongoDB::Atlas::CloudProviderAccess';

  /**
   * Resource props.
   */
  public readonly props: CfnCloudProviderAccessProps;

  /**
   * Attribute `MongoDB::Atlas::CloudProviderAccess.RoleId`
   */
  public readonly attrRoleId: string;
  /**
   * Attribute `MongoDB::Atlas::CloudProviderAccess.AtlasAWSAccountArn`
   */
  public readonly attrAtlasAWSAccountArn: string;
  /**
   * Attribute `MongoDB::Atlas::CloudProviderAccess.AuthorizedDate`
   */
  public readonly attrAuthorizedDate: string;
  /**
   * Attribute `MongoDB::Atlas::CloudProviderAccess.AtlasAssumedRoleExternalId`
   */
  public readonly attrAtlasAssumedRoleExternalId: string;
  /**
   * Attribute `MongoDB::Atlas::CloudProviderAccess.CreatedDate`
   */
  public readonly attrCreatedDate: string;
  /**
   * Attribute `MongoDB::Atlas::CloudProviderAccess.FeatureUsages`
   */
  public readonly attrFeatureUsages: featureUsages[];

  /**
   * Create a new `MongoDB::Atlas::CloudProviderAccess`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnCloudProviderAccessProps) {
    super(scope, id, { type: CfnCloudProviderAccess.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnCloudProviderAccessProps(props)! });

    this.props = props;

    this.attrRoleId = cdk.Token.asString(this.getAtt('RoleId'));
    this.attrAtlasAWSAccountArn = cdk.Token.asString(this.getAtt('AtlasAWSAccountArn'));
    this.attrAuthorizedDate = cdk.Token.asString(this.getAtt('AuthorizedDate'));
    this.attrAtlasAssumedRoleExternalId = cdk.Token.asString(this.getAtt('AtlasAssumedRoleExternalId'));
    this.attrCreatedDate = cdk.Token.asString(this.getAtt('CreatedDate'));
    this.attrFeatureUsages = this.getAtt('FeatureUsages');
  }
}