// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Returns, adds, edits, and removes federation-related features such as role mappings and connected organization configurations.
 *
 * @schema CfnFederatedSettingOrgConfigsProps
 */
export interface CfnFederatedSettingOrgConfigsProps {
  /**
   * @schema CfnFederatedSettingOrgConfigsProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * Approved domains that restrict users who can join the organization based on their email address.
   *
   * @schema CfnFederatedSettingOrgConfigsProps#DomainAllowList
   */
  readonly domainAllowList?: string[];

  /**
   * Value that indicates whether domain restriction is enabled for this connected org.
   *
   * @schema CfnFederatedSettingOrgConfigsProps#DomainRestrictionEnabled
   */
  readonly domainRestrictionEnabled?: boolean;

  /**
   * Unique 20-hexadecimal digit string that identifies the identity provider that this connected org config is associated with.
   *
   * @schema CfnFederatedSettingOrgConfigsProps#IdentityProviderId
   */
  readonly identityProviderId?: string;

  /**
   * Atlas roles that are granted to a user in this organization after authenticating.
   *
   * @schema CfnFederatedSettingOrgConfigsProps#PostAuthRoleGrants
   */
  readonly postAuthRoleGrants?: CfnFederatedSettingOrgConfigsPropsPostAuthRoleGrants[];

  /**
   * Role mappings that are configured in this organization.
   *
   * @schema CfnFederatedSettingOrgConfigsProps#RoleMappings
   */
  readonly roleMappings?: RoleMappingView[];

  /**
   * List that contains the users who have an email address that doesn't match any domain on the allowed list.
   *
   * @schema CfnFederatedSettingOrgConfigsProps#UserConflicts
   */
  readonly userConflicts?: FederatedUserView[];

}

/**
 * Converts an object of type 'CfnFederatedSettingOrgConfigsProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnFederatedSettingOrgConfigsProps(obj: CfnFederatedSettingOrgConfigsProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'DomainAllowList': obj.domainAllowList?.map(y => y),
    'DomainRestrictionEnabled': obj.domainRestrictionEnabled,
    'IdentityProviderId': obj.identityProviderId,
    'PostAuthRoleGrants': obj.postAuthRoleGrants?.map(y => y),
    'RoleMappings': obj.roleMappings?.map(y => toJson_RoleMappingView(y)),
    'UserConflicts': obj.userConflicts?.map(y => toJson_FederatedUserView(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateKey': obj.privateKey,
    'PublicKey': obj.publicKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnFederatedSettingOrgConfigsPropsPostAuthRoleGrants
 */
export enum CfnFederatedSettingOrgConfigsPropsPostAuthRoleGrants {
  /** GLOBAL_AUTOMATION_ADMIN */
  GLOBAL_AUTOMATION_ADMIN = 'GLOBAL_AUTOMATION_ADMIN',
  /** GLOBAL_BACKUP_ADMIN */
  GLOBAL_BACKUP_ADMIN = 'GLOBAL_BACKUP_ADMIN',
  /** GLOBAL_METERING_USER */
  GLOBAL_METERING_USER = 'GLOBAL_METERING_USER',
  /** GLOBAL_METRICS_INTERNAL_USER */
  GLOBAL_METRICS_INTERNAL_USER = 'GLOBAL_METRICS_INTERNAL_USER',
  /** GLOBAL_MONITORING_ADMIN */
  GLOBAL_MONITORING_ADMIN = 'GLOBAL_MONITORING_ADMIN',
  /** GLOBAL_OWNER */
  GLOBAL_OWNER = 'GLOBAL_OWNER',
  /** ORG_OWNER */
  ORG_OWNER = 'ORG_OWNER',
  /** ORG_MEMBER */
  ORG_MEMBER = 'ORG_MEMBER',
}

/**
 * @schema RoleMappingView
 */
export interface RoleMappingView {
  /**
   * Unique human-readable label that identifies the identity provider group to whichthis role mapping applies.
   *
   * @schema RoleMappingView#ExternalGroupName
   */
  readonly externalGroupName?: string;

  /**
   * Unique 24-hexadecimal digit string that identifies this role mapping.
   *
   * @schema RoleMappingView#Id
   */
  readonly id?: string;

  /**
   * Atlas roles and the unique identifiers of the groups and organizations associated with each role.
   *
   * @schema RoleMappingView#RoleAssignments
   */
  readonly roleAssignments?: RoleAssignment[];

}

/**
 * Converts an object of type 'RoleMappingView' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RoleMappingView(obj: RoleMappingView | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ExternalGroupName': obj.externalGroupName,
    'Id': obj.id,
    'RoleAssignments': obj.roleAssignments?.map(y => toJson_RoleAssignment(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema FederatedUserView
 */
export interface FederatedUserView {
  /**
   * @schema FederatedUserView#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * Email address of the MongoDB Cloud user linked to the federated organization.
   *
   * @schema FederatedUserView#EmailAddress
   */
  readonly emailAddress?: string;

  /**
   * Unique 24-hexadecimal digit string that identifies the federation to which this MongoDB Cloud user belongs.
   *
   * @schema FederatedUserView#FederationSettingsId
   */
  readonly federationSettingsId?: string;

  /**
   * First or given name that belongs to the MongoDB Cloud user.
   *
   * @schema FederatedUserView#FirstName
   */
  readonly firstName?: string;

  /**
   * Last name, family name, or surname that belongs to the MongoDB Cloud user.
   *
   * @schema FederatedUserView#LastName
   */
  readonly lastName?: string;

  /**
   * Unique 24-hexadecimal digit string that identifies this user.
   *
   * @schema FederatedUserView#UserId
   */
  readonly userId?: string;

}

/**
 * Converts an object of type 'FederatedUserView' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FederatedUserView(obj: FederatedUserView | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'EmailAddress': obj.emailAddress,
    'FederationSettingsId': obj.federationSettingsId,
    'FirstName': obj.firstName,
    'LastName': obj.lastName,
    'UserId': obj.userId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RoleAssignment
 */
export interface RoleAssignment {
  /**
   * @schema RoleAssignment#GroupId
   */
  readonly groupId?: string;

  /**
   * @schema RoleAssignment#OrgId
   */
  readonly orgId?: string;

  /**
   * @schema RoleAssignment#Role
   */
  readonly role?: RoleAssignmentRole;

}

/**
 * Converts an object of type 'RoleAssignment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RoleAssignment(obj: RoleAssignment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'GroupId': obj.groupId,
    'OrgId': obj.orgId,
    'Role': obj.role,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RoleAssignmentRole
 */
export enum RoleAssignmentRole {
  /** GLOBAL_AUTOMATION_ADMIN */
  GLOBAL_AUTOMATION_ADMIN = 'GLOBAL_AUTOMATION_ADMIN',
  /** GLOBAL_BACKUP_ADMIN */
  GLOBAL_BACKUP_ADMIN = 'GLOBAL_BACKUP_ADMIN',
  /** GLOBAL_METERING_USER */
  GLOBAL_METERING_USER = 'GLOBAL_METERING_USER',
  /** GLOBAL_METRICS_INTERNAL_USER */
  GLOBAL_METRICS_INTERNAL_USER = 'GLOBAL_METRICS_INTERNAL_USER',
  /** GLOBAL_MONITORING_ADMIN */
  GLOBAL_MONITORING_ADMIN = 'GLOBAL_MONITORING_ADMIN',
  /** GLOBAL_OWNER */
  GLOBAL_OWNER = 'GLOBAL_OWNER',
  /** GLOBAL_READ_ONLY */
  GLOBAL_READ_ONLY = 'GLOBAL_READ_ONLY',
  /** ORG_OWNER */
  ORG_OWNER = 'ORG_OWNER',
  /** ORG_MEMBER */
  ORG_MEMBER = 'ORG_MEMBER',
}


/**
 * A CloudFormation `MongoDB::Atlas::FederatedSettingOrgConfigs`
 *
 * @cloudformationResource MongoDB::Atlas::FederatedSettingOrgConfigs
 * @stability external
 */
export class CfnFederatedSettingOrgConfigs extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = 'MongoDB::Atlas::FederatedSettingOrgConfigs';

  /**
   * Resource props.
   */
  public readonly props: CfnFederatedSettingOrgConfigsProps;

  /**
   * Attribute `MongoDB::Atlas::FederatedSettingOrgConfigs.OrgId`
   */
  public readonly attrOrgId: string;
  /**
   * Attribute `MongoDB::Atlas::FederatedSettingOrgConfigs.TestMode`
   */
  public readonly attrTestMode: string;
  /**
   * Attribute `MongoDB::Atlas::FederatedSettingOrgConfigs.FederationSettingsId`
   */
  public readonly attrFederationSettingsId: string;

  /**
   * Create a new `MongoDB::Atlas::FederatedSettingOrgConfigs`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnFederatedSettingOrgConfigsProps) {
    super(scope, id, { type: CfnFederatedSettingOrgConfigs.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnFederatedSettingOrgConfigsProps(props)! });

    this.props = props;

    this.attrOrgId = cdk.Token.asString(this.getAtt('OrgId'));
    this.attrTestMode = cdk.Token.asString(this.getAtt('TestMode'));
    this.attrFederationSettingsId = cdk.Token.asString(this.getAtt('FederationSettingsId'));
  }
}