// Generated by cdk-import
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

/**
 * Adds one team to the specified project. All members of the team share the same project access. To use this resource, the requesting API Key must have the Project User Admin role. This resource doesn't require the API Key to have an Access List.
 *
 * @schema CfnTeamsProps
 */
export interface CfnTeamsProps {
  /**
   * @schema CfnTeamsProps#ApiKeys
   */
  readonly apiKeys?: ApiKeyDefinition;

  /**
   * One or more organization- or project-level roles to assign to the MongoDB Cloud user.
   *
   * @schema CfnTeamsProps#RoleNames
   */
  readonly roleNames?: CfnTeamsPropsRoleNames[];

  /**
   * Unique 24-hexadecimal character string that identifies the team.
   *
   * @schema CfnTeamsProps#OrgId
   */
  readonly orgId?: string;

  /**
   * Unique 24-hexadecimal character string that identifies the project.
   *
   * @schema CfnTeamsProps#GroupId
   */
  readonly groupId?: string;

  /**
   * Unique 24-hexadecimal character string that identifies the team.
   *
   * @schema CfnTeamsProps#Name
   */
  readonly name?: string;

  /**
   * One or more organization- or project-level roles to assign to the MongoDB Cloud user.
   *
   * @schema CfnTeamsProps#Usernames
   */
  readonly usernames?: string[];

}

/**
 * Converts an object of type 'CfnTeamsProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CfnTeamsProps(obj: CfnTeamsProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ApiKeys': toJson_ApiKeyDefinition(obj.apiKeys),
    'RoleNames': obj.roleNames?.map(y => y),
    'OrgId': obj.orgId,
    'GroupId': obj.groupId,
    'Name': obj.name,
    'Usernames': obj.usernames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema apiKeyDefinition
 */
export interface ApiKeyDefinition {
  /**
   * @schema apiKeyDefinition#PrivateKey
   */
  readonly privateKey?: string;

  /**
   * @schema apiKeyDefinition#PublicKey
   */
  readonly publicKey?: string;

}

/**
 * Converts an object of type 'ApiKeyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApiKeyDefinition(obj: ApiKeyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'PrivateKey': obj.privateKey,
    'PublicKey': obj.publicKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema CfnTeamsPropsRoleNames
 */
export enum CfnTeamsPropsRoleNames {
  /** GROUP_CLUSTER_MANAGER */
  GROUP_CLUSTER_MANAGER = 'GROUP_CLUSTER_MANAGER',
  /** GROUP_DATA_ACCESS_ADMIN */
  GROUP_DATA_ACCESS_ADMIN = 'GROUP_DATA_ACCESS_ADMIN',
  /** GROUP_DATA_ACCESS_READ_ONLY */
  GROUP_DATA_ACCESS_READ_ONLY = 'GROUP_DATA_ACCESS_READ_ONLY',
  /** GROUP_DATA_ACCESS_READ_WRITE */
  GROUP_DATA_ACCESS_READ_WRITE = 'GROUP_DATA_ACCESS_READ_WRITE',
  /** GROUP_OWNER */
  GROUP_OWNER = 'GROUP_OWNER',
  /** GROUP_READ_ONLY */
  GROUP_READ_ONLY = 'GROUP_READ_ONLY',
}


/**
 * A CloudFormation `MongoDB::Atlas::Teams`
 *
 * @cloudformationResource MongoDB::Atlas::Teams
 * @stability external
 */
export class CfnTeams extends cdk.CfnResource {
  /**
  * The CloudFormation resource type name for this resource class.
  */
  public static readonly CFN_RESOURCE_TYPE_NAME = 'MongoDB::Atlas::Teams';

  /**
   * Resource props.
   */
  public readonly props: CfnTeamsProps;

  /**
   * Attribute `MongoDB::Atlas::Teams.TeamId`
   */
  public readonly attrTeamId: string;
  /**
   * Attribute `MongoDB::Atlas::Teams.Users`
   */
  public readonly attrUsers: any[];

  /**
   * Create a new `MongoDB::Atlas::Teams`.
   *
   * @param scope - scope in which this resource is defined
   * @param id    - scoped id of the resource
   * @param props - resource properties
   */
  constructor(scope: constructs.Construct, id: string, props: CfnTeamsProps) {
    super(scope, id, { type: CfnTeams.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnTeamsProps(props)! });

    this.props = props;

    this.attrTeamId = cdk.Token.asString(this.getAtt('TeamId'));
    this.attrUsers = cdk.Token.asList(this.getAtt('Users'));
  }
}