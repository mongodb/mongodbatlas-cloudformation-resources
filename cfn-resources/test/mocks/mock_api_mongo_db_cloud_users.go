// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/mod/go.mongodb.org/atlas-sdk/v20231001001@v20231001001.1.0/admin/api_mongo_db_cloud_users.go

// Package mock_admin is a generated GoMock package.
package mock_admin

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "go.mongodb.org/atlas-sdk/v20231001001/admin"
)

// MockMongoDBCloudUsersApi is a mock of MongoDBCloudUsersApi interface.
type MockMongoDBCloudUsersApi struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBCloudUsersApiMockRecorder
}

// MockMongoDBCloudUsersApiMockRecorder is the mock recorder for MockMongoDBCloudUsersApi.
type MockMongoDBCloudUsersApiMockRecorder struct {
	mock *MockMongoDBCloudUsersApi
}

// NewMockMongoDBCloudUsersApi creates a new mock instance.
func NewMockMongoDBCloudUsersApi(ctrl *gomock.Controller) *MockMongoDBCloudUsersApi {
	mock := &MockMongoDBCloudUsersApi{ctrl: ctrl}
	mock.recorder = &MockMongoDBCloudUsersApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBCloudUsersApi) EXPECT() *MockMongoDBCloudUsersApiMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockMongoDBCloudUsersApi) CreateUser(ctx context.Context, cloudAppUser *admin.CloudAppUser) admin.CreateUserApiRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, cloudAppUser)
	ret0, _ := ret[0].(admin.CreateUserApiRequest)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMongoDBCloudUsersApiMockRecorder) CreateUser(ctx, cloudAppUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).CreateUser), ctx, cloudAppUser)
}

// CreateUserWithParams mocks base method.
func (m *MockMongoDBCloudUsersApi) CreateUserWithParams(ctx context.Context, args *admin.CreateUserApiParams) admin.CreateUserApiRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithParams", ctx, args)
	ret0, _ := ret[0].(admin.CreateUserApiRequest)
	return ret0
}

// CreateUserWithParams indicates an expected call of CreateUserWithParams.
func (mr *MockMongoDBCloudUsersApiMockRecorder) CreateUserWithParams(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithParams", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).CreateUserWithParams), ctx, args)
}

// GetUser mocks base method.
func (m *MockMongoDBCloudUsersApi) GetUser(ctx context.Context, userId string) admin.GetUserApiRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userId)
	ret0, _ := ret[0].(admin.GetUserApiRequest)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockMongoDBCloudUsersApiMockRecorder) GetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).GetUser), ctx, userId)
}

// GetUserByUsername mocks base method.
func (m *MockMongoDBCloudUsersApi) GetUserByUsername(ctx context.Context, userName string) admin.GetUserByUsernameApiRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, userName)
	ret0, _ := ret[0].(admin.GetUserByUsernameApiRequest)
	return ret0
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockMongoDBCloudUsersApiMockRecorder) GetUserByUsername(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).GetUserByUsername), ctx, userName)
}

// GetUserByUsernameWithParams mocks base method.
func (m *MockMongoDBCloudUsersApi) GetUserByUsernameWithParams(ctx context.Context, args *admin.GetUserByUsernameApiParams) admin.GetUserByUsernameApiRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameWithParams", ctx, args)
	ret0, _ := ret[0].(admin.GetUserByUsernameApiRequest)
	return ret0
}

// GetUserByUsernameWithParams indicates an expected call of GetUserByUsernameWithParams.
func (mr *MockMongoDBCloudUsersApiMockRecorder) GetUserByUsernameWithParams(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameWithParams", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).GetUserByUsernameWithParams), ctx, args)
}

// GetUserWithParams mocks base method.
func (m *MockMongoDBCloudUsersApi) GetUserWithParams(ctx context.Context, args *admin.GetUserApiParams) admin.GetUserApiRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithParams", ctx, args)
	ret0, _ := ret[0].(admin.GetUserApiRequest)
	return ret0
}

// GetUserWithParams indicates an expected call of GetUserWithParams.
func (mr *MockMongoDBCloudUsersApiMockRecorder) GetUserWithParams(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithParams", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).GetUserWithParams), ctx, args)
}

// createUserExecute mocks base method.
func (m *MockMongoDBCloudUsersApi) createUserExecute(r admin.CreateUserApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createUserExecute", r)
	ret0, _ := ret[0].(*admin.CloudAppUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// createUserExecute indicates an expected call of createUserExecute.
func (mr *MockMongoDBCloudUsersApiMockRecorder) createUserExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createUserExecute", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).createUserExecute), r)
}

// getUserByUsernameExecute mocks base method.
func (m *MockMongoDBCloudUsersApi) getUserByUsernameExecute(r admin.GetUserByUsernameApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByUsernameExecute", r)
	ret0, _ := ret[0].(*admin.CloudAppUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getUserByUsernameExecute indicates an expected call of getUserByUsernameExecute.
func (mr *MockMongoDBCloudUsersApiMockRecorder) getUserByUsernameExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByUsernameExecute", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).getUserByUsernameExecute), r)
}

// getUserExecute mocks base method.
func (m *MockMongoDBCloudUsersApi) getUserExecute(r admin.GetUserApiRequest) (*admin.CloudAppUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserExecute", r)
	ret0, _ := ret[0].(*admin.CloudAppUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getUserExecute indicates an expected call of getUserExecute.
func (mr *MockMongoDBCloudUsersApiMockRecorder) getUserExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserExecute", reflect.TypeOf((*MockMongoDBCloudUsersApi)(nil).getUserExecute), r)
}
