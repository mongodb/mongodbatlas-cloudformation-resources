// Code generated by MockGen. DO NOT EDIT.
// Source: cfn-resources/teams/cmd/resource/team-user/team_user.go

// Package mock_teamuser is a generated GoMock package.
package mock_teamuser

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "go.mongodb.org/atlas-sdk/v20231001001/admin"
)

// MockUserFetcher is a mock of UserFetcher interface.
type MockUserFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockUserFetcherMockRecorder
}

// MockUserFetcherMockRecorder is the mock recorder for MockUserFetcher.
type MockUserFetcherMockRecorder struct {
	mock *MockUserFetcher
}

// NewMockUserFetcher creates a new mock instance.
func NewMockUserFetcher(ctrl *gomock.Controller) *MockUserFetcher {
	mock := &MockUserFetcher{ctrl: ctrl}
	mock.recorder = &MockUserFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFetcher) EXPECT() *MockUserFetcherMockRecorder {
	return m.recorder
}

// GetUserByUsername mocks base method.
func (m *MockUserFetcher) GetUserByUsername(ctx context.Context, userName string) (*admin.CloudAppUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, userName)
	ret0, _ := ret[0].(*admin.CloudAppUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserFetcherMockRecorder) GetUserByUsername(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserFetcher)(nil).GetUserByUsername), ctx, userName)
}
