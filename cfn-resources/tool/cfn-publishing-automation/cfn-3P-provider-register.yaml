description: |
  # CFN-3P-Provider-Register
  This automation document builds and registers  3rd party resource providers. This automation document can register resources in a single AWS account or in multiple accounts and regions. However, multi-account and regions require a role. Please refer to  the [SSM multi-account ](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html) documentation.
schemaVersion: '0.3'
assumeRole: '{{ AssumeRole }}'
parameters:
  Repository:
    type: String
    description: URL of the resource repository
    default: 'https://github.com/mongodb/mongodbatlas-cloudformation-resources'
  ResourceName:
    type: String
    description: the folder name of the resource as per the folder structure in your repo.
  ResourceVersionPublishing:
    type: String
    description: 'the version used to publish the resource, empty will use the next minor version.'
    default: ''
  OtherParams:
    type: String
    default: ''
    description: extra parameters that are specific to resource.
  BaseUrl:
    type: String
    default: 'https://cloud.mongodb.com/'
    description: Atlas Base Url
  OrgID:
    type: String
    description: Atlas OrgID
  PubKey:
    type: String
    description: Atlas Public key
  PvtKey:
    type: String
    description: Atlas Private key
  BranchName:
    type: String
    default: master
    description: git branch name.
  ProjectName:
    type: String
    description: the name of the Build Project created in CodeBuild when automation is run.
  BuilderRole:
    type: String
    description: The role that allows CodeBuild to build and submit the resource on your behalf
    default: DevOpsIntegrationsContractors-CodeBuild
  AssumeRole:
    type: String
    description: A role this document can assume
    default: null
mainSteps:
  - name: Get_Region
    action: 'aws:executeAwsApi'
    inputs:
      Service: ec2
      Api: DescribeAvailabilityZones
    outputs:
      - Name: RegionName
        Selector: '$.AvailabilityZones[0].RegionName'
        Type: String
  - name: Go_Build_Enviroment
    action: 'aws:executeAwsApi'
    inputs:
      Service: codebuild
      Api: CreateProject
      artifacts:
        type: NO_ARTIFACTS
      description: This environment builds a 3P resource
      environment:
        computeType: BUILD_GENERAL1_SMALL
        image: 'aws/codebuild/amazonlinux2-x86_64-standard:5.0'
        type: LINUX_CONTAINER
        privilegedMode: true
      name: '{{ProjectName}}'
      serviceRole: '{{ BuilderRole }}'
      timeoutInMinutes: 480
      source:
        buildspec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.11
                golang: 1.20
              commands:
                - pip install pre-commit
                - yum install docker -y
            build:
              commands:
                - aws --version
                - wget -q "https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip"
                - unzip -q aws-sam-cli-linux-x86_64.zip -d sam-installation
                - ./sam-installation/install
                - pip3 install cloudformation-cli cloudformation-cli-go-plugin
                - export MONGODB_ATLAS_BASE_URL={{BaseUrl}}
                - export MONGODB_ATLAS_ORG_ID={{OrgID}}
                - export MONGODB_ATLAS_PUBLIC_KEY={{PubKey}}
                - export MONGODB_ATLAS_PRIVATE_KEY={{PvtKey}}
                - export MONGODB_ATLAS_OUTPUT=json
                - export MCLI_OPS_MANAGER_URL=$MONGODB_ATLAS_BASE_URL
                - export MCLI_ORG_ID=$MONGODB_ATLAS_ORG_ID
                - export MCLI_PUBLIC_API_KEY=$MONGODB_ATLAS_PUBLIC_KEY
                - export MCLI_PRIVATE_API_KEY=$MONGODB_ATLAS_PRIVATE_KEY
                - export MCLI_OUTPUT=$MONGODB_ATLAS_OUTPUT
                - export RESOURCE_VERSION_PUBLISHING={{ResourceVersionPublishing}}
                - export AWS_DEFAULT_REGION={{Get_Region.RegionName}}
                - 'git clone --branch {{ BranchName }}  {{ Repository }} provider'
                - cd provider
                - cd cfn-resources
                - echo "Installing mongodb-atlas-cli"
                - ./cfn-install-mongo-cli.sh
                - echo "Starting cfn-publish.sh"
                - ./cfn-publish.sh {{ ResourceName }} {{OtherParams}}
        type: NO_SOURCE
    description: Creates an environment that deploys a 3rd party resource
    nextStep: Start_Build
  - name: Start_Build
    action: 'aws:executeAwsApi'
    inputs:
      Service: codebuild
      Api: start-build
      projectName: '{{ProjectName}}'
    outputs:
      - Selector: build.id
        Type: String
        Name: id
  - name: Await_Build_Status
    action: 'aws:waitForAwsResourceProperty'
    inputs:
      Service: codebuild
      Api: batch-get-builds
      ids:
        - '{{ Start_Build.id }}'
      PropertySelector: '$.builds[0].buildStatus'
      DesiredValues:
        - SUCCEEDED
        - FAILED
        - FAULT
        - STOPPED
        - TIMED_OUT
    timeoutSeconds: 10800
  - name: Check_Build_Status
    action: 'aws:assertAwsResourceProperty'
    inputs:
      Service: codebuild
      Api: batch-get-builds
      PropertySelector: '$.builds[0].buildStatus'
      DesiredValues:
        - SUCCEEDED
      ids:
        - '{{ Start_Build.id }}'
    description: 'Proceed with next steps only if build succeeded, otherwise mark automation as Failed.'
  - name: Clean
    action: 'aws:executeAwsApi'
    inputs:
      Service: codebuild
      Api: delete-project
      name: '{{ProjectName}}'
