AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates a cluster on the MongoDB Atlas API and set the Network Peering.
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Cluster Configurations"
        Parameters:
          - ClusterName
      - Label: 
          default: "VPC Peering Configuration"
        Parameters:
          - VpcId
          - AwsAccountId
          - AwsRegionName
          - RouteTableCidrBlock
Parameters:
  ClusterName:
    Type: String
    Description: Name of the Atlas Cluster
  ClusterRegionName:
    Type: String
    Description: Region of the Atlas Cluster
  AtlasCidrBlock:
    Type: String
    Description: CIDR block of the Atlas VPC
  VpcId:
    Type: String
    Description: Unique string that identifies the VPC on Amazon Web Services (AWS) that you want to peer with the MongoDB Cloud VPC.
  AwsAccountId:
    Type: String
    Description: Unique twelve-digit string that identifies the Amazon Web Services (AWS) account that owns the VPC that you peered with the MongoDB Cloud VPC.
  AwsRegionName:
    Type: String
    Description: Amazon Web Services (AWS) region where the Virtual Peering Connection (VPC) that you peered with the MongoDB Cloud VPC resides. The resource returns null if your VPC and the MongoDB Cloud VPC reside in the same region.
  RouteTableCidrBlock:
    Type: String
    Description: Internet Protocol (IP) addresses expressed in Classless Inter-Domain Routing (CIDR) notation of the VPC's subnet that you want to peer with the MongoDB Cloud VPC.
  Profile:
    Type: String
    Description: "Secret Manager Profile that contains the Atlas Programmatic keys."
  ProjectId:
    Type: String
    Description: "The ID of your atlas project."

Mappings: {}
Resources:
  Cluster:
    Type: 'MongoDB::Atlas::Cluster'
    DependsOn: NetworkContainer # Important to wait for the Network Container, otherwise the network container deletion will fail when deleting the stack
    Properties:
      Profile: !Ref Profile
      ProjectId: !Ref ProjectId
      Name: !Ref ClusterName
      AdvancedSettings:
        DefaultReadConcern: available
        DefaultWriteConcern: '1'
        JavascriptEnabled: 'true'
        MinimumEnabledTLSProtocol: TLS1_2
        NoTableScan: 'false'
        OplogSizeMB: '2000'
        SampleSizeBIConnector: '110'
        SampleRefreshIntervalBIConnector: '310'
      BackupEnabled: 'false'
      ClusterType: REPLICASET
      Paused: 'false'
      PitEnabled: 'false'
      BiConnector:
        ReadPreference: secondary
        Enabled: 'false'
      ReplicationSpecs:
        - NumShards: '1'
          AdvancedRegionConfigs:
            - AutoScaling:
                DiskGB:
                  Enabled: 'true'
                Compute:
                  Enabled: 'false'
                  ScaleDownEnabled: 'false'
              ElectableSpecs:
                EbsVolumeType: STANDARD
                InstanceSize: M10
                NodeCount: '3'
              Priority: '7'
              RegionName: !!Ref ClusterRegionName
  NetworkContainer:
    Type: 'MongoDB::Atlas::NetworkContainer'
    Properties:
      Profile: !Ref Profile
      AtlasCidrBlock: !Ref AtlasCidrBlock
      RegionName: !Ref ClusterRegionName
      ProjectId: !Ref ProjectId
  NetworkPeering:
    Type: 'MongoDB::Atlas::NetworkPeering'
    Properties:
      Profile: !Ref Profile
      ProjectId: !Ref ProjectId
      ContainerId: !GetAtt "NetworkContainer.Id"
      AccepterRegionName: !Ref AwsRegionName
      AwsAccountId: !Ref AwsAccountId
      RouteTableCIDRBlock: !Ref RouteTableCidrBlock
      VpcId: !Ref VpcId
  
Outputs:
  ContainerId: {
    Value : { "Fn::GetAtt": [
      "NetworkContainer",
      "Id"
    ] }
  }
  PeerId: {
    Value : { "Fn::GetAtt": [
      "NetworkPeering",
      "Id"
    ] }
  }
